--!strict
--[[
	A LocalScript to create two beautiful, draggable, and dynamic UI menus.
	This script is designed to be placed in StarterPlayerScripts.
	
	This version has been optimized for better performance and
	addresses the issue of tracers being too big and invisible through objects.
	
	This is a V2, which has dramatically improved the UI design and user experience.
]]

-- SERVICES
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

-- CONFIGURATION
local UI_SIZE = UDim2.new(0, 350, 0, 450)
local MINIMIZED_SIZE = UDim2.new(0, 350, 0, 50)
local FONT_BOLD = Enum.Font.GothamBold
local FONT_REGULAR = Enum.Font.Gotham
local HEADER_COLOR = Color3.fromRGB(35, 35, 35)
local PRIMARY_COLOR = Color3.fromRGB(28, 28, 28)
local ACCENT_COLOR = Color3.fromRGB(0, 170, 255)
local NPC_ACCENT_COLOR = Color3.fromRGB(0, 85, 255)
local PLAYER_ACCENT_COLOR = Color3.fromRGB(255, 170, 0)
local TEXT_COLOR = Color3.fromRGB(255, 255, 255)
local SECONDARY_ACCENT_COLOR = Color3.fromRGB(255, 170, 0)
local BORDER_COLOR = Color3.fromRGB(60, 60, 60)
local FOCUSED_COLOR = Color3.fromRGB(50, 50, 50)
local ERROR_COLOR = Color3.fromRGB(255, 50, 50)

local NPC_ESP_DISTANCE = 500
-- NEW CONFIGURATION FOR TRACERS
local TRACER_COLOR = Color3.fromRGB(255, 170, 0)
local TRACER_THICKNESS = 0.2
local TRACER_TRANSPARENCY = 0.2

-- Get the player's PlayerGui to store the UI
local player = Players.LocalPlayer
local PlayerGui = player:WaitForChild("PlayerGui")
local character = player.Character or player.CharacterAdded:Wait()
local myRootPart: Part = character:FindFirstChild("HumanoidRootPart") :: any

-- Create a container for the tracers to ensure they are always visible
local TracerContainer = Instance.new("Folder")
TracerContainer.Name = "TracerContainer"
TracerContainer.Parent = Workspace

-- Generic function to create a beautiful menu frame
local function createMenu(name: string, title: string, accentColor: Color3, position: UDim2)
	local screenGui = Instance.new("ScreenGui")
	screenGui.Name = name
	screenGui.ResetOnSpawn = false
	screenGui.Parent = PlayerGui

	local mainFrame = Instance.new("Frame")
	mainFrame.Name = "MainFrame"
	mainFrame.Size = UI_SIZE
	mainFrame.Position = position
	mainFrame.BackgroundColor3 = PRIMARY_COLOR
	mainFrame.BorderSizePixel = 0
	mainFrame.AnchorPoint = Vector2.new(0.5, 0.5)
	mainFrame.ClipsDescendants = true
	mainFrame.Parent = screenGui

	local corner = Instance.new("UICorner")
	corner.CornerRadius = UDim.new(0, 12)
	corner.Parent = mainFrame

	local stroke = Instance.new("UIStroke")
	stroke.Color = BORDER_COLOR
	stroke.Thickness = 2
	stroke.Parent = mainFrame

	local titleBar = Instance.new("Frame")
	titleBar.Name = "TitleBar"
	titleBar.Size = UDim2.new(1, 0, 0, 50)
	titleBar.BackgroundColor3 = HEADER_COLOR
	titleBar.BorderSizePixel = 0
	titleBar.Parent = mainFrame

	local titleBarCorner = Instance.new("UICorner")
	titleBarCorner.CornerRadius = UDim.new(0, 12)
	titleBarCorner.Parent = titleBar

	local titleLabel = Instance.new("TextLabel")
	titleLabel.Name = "TitleLabel"
	titleLabel.Size = UDim2.new(1, -90, 1, 0)
	titleLabel.Position = UDim2.new(0, 15, 0, 0)
	titleLabel.BackgroundTransparency = 1
	titleLabel.TextColor3 = accentColor
	titleLabel.TextScaled = true
	titleLabel.Font = FONT_BOLD
	titleLabel.Text = title
	titleLabel.TextXAlignment = Enum.TextXAlignment.Left
	titleLabel.Parent = titleBar

	local minimizeButton = Instance.new("TextButton")
	minimizeButton.Name = "MinimizeButton"
	minimizeButton.Size = UDim2.new(0, 35, 1, -10)
	minimizeButton.Position = UDim2.new(1, -75, 0, 5)
	minimizeButton.BackgroundColor3 = PRIMARY_COLOR
	minimizeButton.BorderSizePixel = 0
	minimizeButton.Text = "â€”"
	minimizeButton.TextColor3 = TEXT_COLOR
	minimizeButton.TextSize = 25
	minimizeButton.Font = FONT_BOLD
	minimizeButton.Parent = titleBar

	local nukeButton = Instance.new("TextButton")
	nukeButton.Name = "NukeButton"
	nukeButton.Size = UDim2.new(0, 35, 1, -10)
	nukeButton.Position = UDim2.new(1, -40, 0, 5)
	nukeButton.BackgroundColor3 = ERROR_COLOR
	nukeButton.BorderSizePixel = 0
	nukeButton.Text = "X"
	nukeButton.TextColor3 = TEXT_COLOR
	nukeButton.TextSize = 20
	nukeButton.Font = FONT_BOLD
	nukeButton.Parent = titleBar
	
	local contentFrame = Instance.new("Frame")
	contentFrame.Name = "ContentFrame"
	contentFrame.Size = UDim2.new(1, 0, 1, -50)
	contentFrame.Position = UDim2.new(0, 0, 0, 50)
	contentFrame.BackgroundTransparency = 1
	contentFrame.Parent = mainFrame
	
	local padding = Instance.new("UIPadding")
	padding.PaddingLeft = UDim.new(0, 15)
	padding.PaddingRight = UDim.new(0, 15)
	padding.PaddingTop = UDim.new(0, 15)
	padding.PaddingBottom = UDim.new(0, 15)
	padding.Parent = contentFrame

	return screenGui, mainFrame, titleBar, minimizeButton, nukeButton, contentFrame
end

-- Generic function to handle dragging
local function makeDraggable(titleBar: Frame, mainFrame: Frame)
	local isDragging = false
	local dragStartPos = Vector2.new(0, 0)
	local dragStartFramePosition = UDim2.new(0, 0, 0, 0)

	titleBar.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			isDragging = true
			dragStartPos = input.Position
			dragStartFramePosition = mainFrame.Position
			UserInputService.MouseIconEnabled = false
		end
	end)

	UserInputService.InputEnded:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			isDragging = false
			UserInputService.MouseIconEnabled = true
		end
	end)

	UserInputService.InputChanged:Connect(function(input)
		if isDragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
			local delta = input.Position - dragStartPos
			local newPosition = dragStartFramePosition + UDim2.new(0, delta.X, 0, delta.Y)
			mainFrame.Position = newPosition
		end
	end)
end

-- Generic function to handle minimize
local function makeMinimizable(minimizeButton: TextButton, mainFrame: Frame)
	local isMinimized = false
	local tweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)

	minimizeButton.MouseButton1Click:Connect(function()
		isMinimized = not isMinimized

		local targetSize = isMinimized and MINIMIZED_SIZE or UI_SIZE
		local targetClipsDescendants = not isMinimized

		local tween = TweenService:Create(mainFrame, tweenInfo, {Size = targetSize})
		tween:Play()

		task.delay(0.2, function()
			mainFrame.ClipsDescendants = targetClipsDescendants
		end)

		minimizeButton.Text = isMinimized and "â€”" or "â€”"
	end)
end

-- =================================================================
-- === Boss Status Menu (Menu 1) ===================================
-- =================================================================
local screenGui1, mainFrame1, titleBar1, minimizeButton1, nukeButton1, contentFrame1 = createMenu(
	"SawBossMenu",
	"Boss Status",
	SECONDARY_ACCENT_COLOR,
	UDim2.new(0.5, -175, 0.5, -275)
)

makeDraggable(titleBar1, mainFrame1)
makeMinimizable(minimizeButton1, mainFrame1)

local statusLabel = Instance.new("TextLabel")
statusLabel.Name = "StatusLabel"
statusLabel.Size = UDim2.new(1, 0, 1, 0)
statusLabel.Position = UDim2.new(0, 0, 0, 0)
statusLabel.BackgroundTransparency = 1
statusLabel.TextColor3 = TEXT_COLOR
statusLabel.TextScaled = true
statusLabel.Font = FONT_REGULAR
statusLabel.Text = "Checking for bosses..."
statusLabel.TextXAlignment = Enum.TextXAlignment.Center
statusLabel.TextYAlignment = Enum.TextYAlignment.Center
statusLabel.Parent = contentFrame1

local enemiesFolder = Workspace:FindFirstChild("Enemies")

if not enemiesFolder then
	statusLabel.Text = "Enemies folder not found!"
	statusLabel.TextColor3 = ERROR_COLOR
end

task.spawn(function()
	while task.wait(1) do
		if not screenGui1.Parent then break end
		if enemiesFolder then
			local sawBoss = enemiesFolder:FindFirstChild("Saw")
			if sawBoss and sawBoss:IsA("Model") then
				statusLabel.Text = "Bosses spawned! ðŸ˜ˆ"
				statusLabel.TextColor3 = ACCENT_COLOR
			else
				statusLabel.Text = "No bosses spawned..."
				statusLabel.TextColor3 = TEXT_COLOR
			end
		end
	end
end)

-- =================================================================
-- === Player & NPC ESP Menu (Menu 2) ==============================
-- =================================================================
local screenGui2, mainFrame2, titleBar2, minimizeButton2, nukeButton2, contentFrame2 = createMenu(
	"PlayerESPMenu",
	"Player & NPC ESP",
	ACCENT_COLOR,
	UDim2.new(0.5, -175, 0.5, 275)
)

makeDraggable(titleBar2, mainFrame2)
makeMinimizable(minimizeButton2, mainFrame2)

-- Player ESP Section
local playerEspLabel = Instance.new("TextLabel")
playerEspLabel.Name = "PlayerEspLabel"
playerEspLabel.Text = "Player ESP Options"
playerEspLabel.Size = UDim2.new(1, 0, 0, 30)
playerEspLabel.BackgroundTransparency = 1
playerEspLabel.TextColor3 = PLAYER_ACCENT_COLOR
playerEspLabel.TextScaled = true
playerEspLabel.Font = FONT_BOLD
playerEspLabel.TextXAlignment = Enum.TextXAlignment.Left
playerEspLabel.Parent = contentFrame2

local playerEspButtonsContainer = Instance.new("Frame")
playerEspButtonsContainer.Name = "PlayerEspButtonsContainer"
playerEspButtonsContainer.Size = UDim2.new(1, 0, 0.35, 0)
playerEspButtonsContainer.BackgroundTransparency = 1
playerEspButtonsContainer.Parent = contentFrame2

local playerListLayout = Instance.new("UIListLayout")
playerListLayout.Padding = UDim.new(0, 10)
playerListLayout.FillDirection = Enum.FillDirection.Vertical
playerListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
playerListLayout.Parent = playerEspButtonsContainer

local playerEspTypes = {
	["Username ESP"] = false,
	["Distance ESP"] = false,
	["Player Tracing"] = false,
}

local playerCheckboxState = {}

-- NPC ESP Section
local npcEspLabel = Instance.new("TextLabel")
npcEspLabel.Name = "NpcEspLabel"
npcEspLabel.Text = "NPC ESP Options"
npcEspLabel.Size = UDim2.new(1, 0, 0, 30)
npcEspLabel.BackgroundTransparency = 1
npcEspLabel.TextColor3 = ACCENT_COLOR
npcEspLabel.TextScaled = true
npcEspLabel.Font = FONT_BOLD
npcEspLabel.TextXAlignment = Enum.TextXAlignment.Left
npcEspLabel.LayoutOrder = 1
npcEspLabel.Parent = contentFrame2

local npcEspButtonsContainer = Instance.new("Frame")
npcEspButtonsContainer.Name = "NpcEspButtonsContainer"
npcEspButtonsContainer.Size = UDim2.new(1, 0, 0.45, 0)
npcEspButtonsContainer.BackgroundTransparency = 1
npcEspButtonsContainer.LayoutOrder = 2
npcEspButtonsContainer.Parent = contentFrame2

local listLayout = Instance.new("UIListLayout")
listLayout.Padding = UDim.new(0, 10)
listLayout.FillDirection = Enum.FillDirection.Vertical
listLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
listLayout.Parent = npcEspButtonsContainer

local npcTypes = {
	["Set Home Point"] = false,
	["Boat Dealer"] = false,
}

local npcCheckboxState = {}

local contentListLayout = Instance.new("UIListLayout")
contentListLayout.Padding = UDim.new(0, 15)
contentListLayout.FillDirection = Enum.FillDirection.Vertical
contentListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
contentListLayout.Parent = contentFrame2

local function createCheckbox(parent: Frame, espName: string, stateTable: table, accentColor: Color3)
	local button = Instance.new("TextButton")
	button.Name = espName .. "Checkbox"
	button.Size = UDim2.new(1, 0, 0, 30)
	button.BackgroundTransparency = 1
	button.BorderSizePixel = 0
	button.Text = ""
	button.Parent = parent

	local checkboxBox = Instance.new("Frame")
	checkboxBox.Name = "CheckboxBox"
	checkboxBox.Size = UDim2.new(0, 20, 0, 20)
	checkboxBox.Position = UDim2.new(0, 0, 0.5, -10)
	checkboxBox.BackgroundColor3 = PRIMARY_COLOR
	checkboxBox.BorderSizePixel = 1
	checkboxBox.BorderColor3 = BORDER_COLOR
	checkboxBox.Parent = button

	local boxCorner = Instance.new("UICorner")
	boxCorner.CornerRadius = UDim.new(0, 5)
	boxCorner.Parent = checkboxBox

	local checkboxIcon = Instance.new("ImageLabel")
	checkboxIcon.Name = "Checkmark"
	checkboxIcon.BackgroundTransparency = 1
	checkboxIcon.Size = UDim2.new(1, 0, 1, 0)
	checkboxIcon.Image = "rbxassetid://603417770"
	checkboxIcon.ImageColor3 = accentColor
	checkboxIcon.Visible = false
	checkboxIcon.Parent = checkboxBox

	local espLabel = Instance.new("TextLabel")
	espLabel.Name = "EspNameLabel"
	espLabel.Size = UDim2.new(1, -30, 1, 0)
	espLabel.Position = UDim2.new(0, 30, 0, 0)
	espLabel.BackgroundTransparency = 1
	espLabel.TextColor3 = TEXT_COLOR
	espLabel.Text = espName
	espLabel.TextScaled = true
	espLabel.Font = FONT_REGULAR
	espLabel.TextXAlignment = Enum.TextXAlignment.Left
	espLabel.Parent = button

	button.MouseEnter:Connect(function()
		TweenService:Create(checkboxBox, TweenInfo.new(0.2), {BackgroundColor3 = FOCUSED_COLOR}):Play()
	end)
	
	button.MouseLeave:Connect(function()
		if not stateTable[espName] then
			TweenService:Create(checkboxBox, TweenInfo.new(0.2), {BackgroundColor3 = PRIMARY_COLOR}):Play()
		else
			TweenService:Create(checkboxBox, TweenInfo.new(0.2), {BackgroundColor3 = accentColor}):Play()
		end
	end)

	button.MouseButton1Click:Connect(function()
		local newState = not stateTable[espName]
		stateTable[espName] = newState

		if newState then
			checkboxIcon.Visible = true
			TweenService:Create(checkboxBox, TweenInfo.new(0.2), {BackgroundColor3 = accentColor}):Play()
		else
			checkboxIcon.Visible = false
			TweenService:Create(checkboxBox, TweenInfo.new(0.2), {BackgroundColor3 = PRIMARY_COLOR}):Play()
		end
	end)

	return button
end

-- Create player checkboxes
for espName, _ in pairs(playerEspTypes) do
	playerCheckboxState[espName] = false
	createCheckbox(playerEspButtonsContainer, espName, playerCheckboxState, PLAYER_ACCENT_COLOR)
end

-- Create NPC checkboxes
for npcName, _ in pairs(npcTypes) do
	npcCheckboxState[npcName] = false
	createCheckbox(npcEspButtonsContainer, npcName, npcCheckboxState, NPC_ACCENT_COLOR)
end

-- ESP FUNCTIONALITY
local playerLabels = {}
local npcLabels = {}
local playerTracers = {}
local npcsFolder = Workspace:WaitForChild("NPCs")

-- PLAYER ESP FUNCTIONS
local function createPlayerLabel()
	local label = Instance.new("TextLabel")
	label.BackgroundTransparency = 1
	label.Size = UDim2.new(0, 150, 0, 20)
	label.TextColor3 = PLAYER_ACCENT_COLOR
	label.TextStrokeColor3 = Color3.new(0, 0, 0)
	label.TextStrokeTransparency = 0.5
	label.TextScaled = true
	label.Font = FONT_BOLD
	label.ZIndex = 10
	label.Parent = screenGui2
	return label
end

local function createPlayerLabelsForExistingPlayers()
	for _, p in ipairs(Players:GetPlayers()) do
		if p ~= player and not playerLabels[p] then
			playerLabels[p] = createPlayerLabel()
		end
	end
end

local function updatePlayerLabels()
	for p, label in pairs(playerLabels) do
		local character = p.Character
		if not character or not character:FindFirstChild("HumanoidRootPart") then
			label.Visible = false
			continue
		end

		local rootPart = character.HumanoidRootPart
		local screenPos, onScreen = Workspace.CurrentCamera:WorldToScreenPoint(rootPart.Position + Vector3.new(0, 5, 0))

		if onScreen then
			local labelText = ""

			if playerCheckboxState["Username ESP"] and playerCheckboxState["Distance ESP"] then
				local distanceInMeters = (rootPart.Position - myRootPart.Position).Magnitude * 0.28
				local formattedDistance = math.floor(distanceInMeters * 10) / 10
				labelText = p.Name .. " (" .. formattedDistance .. "m)"
			elseif playerCheckboxState["Username ESP"] then
				labelText = p.Name
			elseif playerCheckboxState["Distance ESP"] then
				local distanceInMeters = (rootPart.Position - myRootPart.Position).Magnitude * 0.28
				local formattedDistance = math.floor(distanceInMeters * 10) / 10
				labelText = formattedDistance .. "m"
			end

			label.Position = UDim2.new(0, screenPos.X - label.AbsoluteSize.X / 2, 0, screenPos.Y - label.AbsoluteSize.Y / 2)
			label.Text = labelText
			label.Visible = labelText ~= ""
		else
			label.Visible = false
		end
	end
end

local function createPlayerTracer()
	local tracer = Instance.new("Part")
	tracer.Name = "Tracer"
	tracer.Anchored = true
	tracer.CanCollide = false
	tracer.Material = Enum.Material.ForceField
	tracer.Transparency = TRACER_TRANSPARENCY
	tracer.Color = TRACER_COLOR
	tracer.Size = Vector3.new(1, 1, 1)
	tracer.Parent = TracerContainer
	
	local mesh = Instance.new("CylinderMesh")
	mesh.Parent = tracer
	
	return tracer
end

local function updatePlayerTracer(tracer, targetPart, myRootPart)
	if not myRootPart or not targetPart or not targetPart.Parent then
		if tracer then tracer:Destroy() end
		return
	end
	
	local startPos = myRootPart.Position
	local endPos = targetPart.Position
	local distance = (startPos - endPos).Magnitude
	local middle = startPos:Lerp(endPos, 0.5)

	local tracerCFrame = CFrame.new(middle, endPos)
	tracerCFrame = tracerCFrame * CFrame.Angles(math.pi / 2, 0, 0)
	tracer.CFrame = tracerCFrame

	local mesh = tracer:FindFirstChildOfClass("CylinderMesh")
	if mesh then
		mesh.Scale = Vector3.new(TRACER_THICKNESS, distance, TRACER_THICKNESS)
	end
	
	tracer.Transparency = TRACER_TRANSPARENCY
end

local function updatePlayerTracers()
	local playersWithTracers = {}
	
	for _, p in ipairs(Players:GetPlayers()) do
		if p ~= player then
			local targetCharacter = p.Character
			local targetPart = targetCharacter and targetCharacter:FindFirstChild("HumanoidRootPart")

			if targetPart and targetPart.Position and myRootPart.Position then
				local tracer = playerTracers[p]
				if not tracer then
					tracer = createPlayerTracer()
					playerTracers[p] = tracer
				end
				
				updatePlayerTracer(tracer, targetPart, myRootPart)
				playersWithTracers[p] = true
			end
		end
	end

	for p, tracer in pairs(playerTracers) do
		if not playersWithTracers[p] then
			tracer:Destroy()
			playerTracers[p] = nil
		end
	end
end

-- NPC ESP FUNCTIONS
local function createNpcLabel(npcName)
	local label = Instance.new("TextLabel")
	label.BackgroundTransparency = 1
	label.Size = UDim2.new(0, 150, 0, 20)
	label.TextColor3 = NPC_ACCENT_COLOR
	label.TextStrokeColor3 = Color3.new(0, 0, 0)
	label.TextStrokeTransparency = 0.5
	label.TextScaled = true
	label.Font = FONT_BOLD
	label.Text = npcName
	label.Name = npcName .. "ESPLabel"
	label.ZIndex = 10
	label.Parent = screenGui2
	return label
end

local function updateNpcLabels()
	local existingNpcs = {}
	for _, npc in ipairs(npcsFolder:GetChildren()) do
		if npc:IsA("Model") and npc.Name and npcCheckboxState[npc.Name] and npc:FindFirstChild("HumanoidRootPart") then
			local rootPart = npc.HumanoidRootPart
			local distance = (myRootPart.Position - rootPart.Position).Magnitude
			if distance <= NPC_ESP_DISTANCE then
				existingNpcs[npc] = true
				if not npcLabels[npc] then
					npcLabels[npc] = createNpcLabel(npc.Name)
				end
				
				local label = npcLabels[npc]
				local screenPos, onScreen = Workspace.CurrentCamera:WorldToScreenPoint(rootPart.Position + Vector3.new(0, 5, 0))
				if onScreen then
					local distanceInMeters = (rootPart.Position - myRootPart.Position).Magnitude * 0.28
					local formattedDistance = math.floor(distanceInMeters * 10) / 10
					
					label.Text = npc.Name .. " (" .. formattedDistance .. "m)"
					label.Position = UDim2.new(0, screenPos.X - label.AbsoluteSize.X / 2, 0, screenPos.Y - label.AbsoluteSize.Y / 2)
					label.Visible = true
				else
					label.Visible = false
				end
			end
		end
	end

	for npc, label in pairs(npcLabels) do
		if not existingNpcs[npc] then
			label:Destroy()
			npcLabels[npc] = nil
		end
	end
end

-- EVENT HANDLING
Players.PlayerAdded:Connect(function(p)
	if p ~= player then
		playerLabels[p] = createPlayerLabel()
		playerTracers[p] = createPlayerTracer()
	end
end)

Players.PlayerRemoving:Connect(function(p)
	local label = playerLabels[p]
	if label then
		label:Destroy()
		playerLabels[p] = nil
	end
	local tracer = playerTracers[p]
	if tracer then
		tracer:Destroy()
		playerTracers[p] = nil
	end
end)

-- Initialize labels for existing players on startup
createPlayerLabelsForExistingPlayers()

-- Main ESP loop
RunService.RenderStepped:Connect(function()
	myRootPart = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
	if not myRootPart then return end

	-- Player ESP
	local isPlayerLabelEspActive = playerCheckboxState["Username ESP"] or playerCheckboxState["Distance ESP"]
	local isTracingActive = playerCheckboxState["Player Tracing"]

	if isPlayerLabelEspActive then
		updatePlayerLabels()
	else
		for _, label in pairs(playerLabels) do
			label.Visible = false
		end
	end

	-- Player Tracers
	if isTracingActive then
		updatePlayerTracers()
	else
		for _, tracer in pairs(playerTracers) do
			tracer.Transparency = 1
		end
	end

	-- NPC ESP
	local isNpcEspActive = false
	for _, state in pairs(npcCheckboxState) do
		if state then
			isNpcEspActive = true
			break
		end
	end

	if isNpcEspActive then
		updateNpcLabels()
	else
		for _, label in pairs(npcLabels) do
			label.Visible = false
		end
	end
end)

local function checkAndDestroyScript()
	if not screenGui1.Parent and not screenGui2.Parent then
		if TracerContainer then
			TracerContainer:Destroy()
		end
		script:Destroy()
	end
end

nukeButton1.MouseButton1Click:Connect(function()
	screenGui1:Destroy()
	checkAndDestroyScript()
end)

nukeButton2.MouseButton1Click:Connect(function()
	for p, label in pairs(playerLabels) do
		if label then label:Destroy() end
		playerLabels[p] = nil
	end
	for p, tracer in pairs(playerTracers) do
		if tracer then tracer:Destroy() end
		playerTracers[p] = nil
	end
	for npc, label in pairs(npcLabels) do
		if label then label:Destroy() end
		npcLabels[npc] = nil
	end
	
	for espName, _ in pairs(playerCheckboxState) do
		playerCheckboxState[espName] = false
	end
	for npcName, _ in pairs(npcCheckboxState) do
		npcCheckboxState[npcName] = false
	end
	
	screenGui2:Destroy()
	checkAndDestroyScript()
end)
