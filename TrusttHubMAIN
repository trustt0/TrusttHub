--!strict
--[[
	A LocalScript to create four cool, modern, draggable, and dynamic UI menus.
	This script is designed to be placed in StarterPlayerScripts.
	
	This version includes all four menus: Boss Status, Player & NPC ESP, Farm Level, and the Fruit Menu.
	The layout has been corrected in the Player & NPC ESP menu, ensuring titles are above their toggles.
]]

-- SERVICES
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

-- CONFIGURATION
local UI_SIZE = UDim2.new(0, 300, 0, 400)
local MINIMIZED_SIZE = UDim2.new(0, 300, 0, 45)
local TITLE_FONT = Enum.Font.SourceSansBold
local FONT_COLOR = Color3.fromRGB(255, 255, 255)
local FROSTED_BACKGROUND = Color3.fromRGB(25, 25, 25)
local BORDER_COLOR = Color3.fromRGB(60, 60, 60)
local SHADOW_COLOR = Color3.fromRGB(0, 0, 0)

-- ACCENT COLORS FOR EACH MENU
local BOSS_ACCENT = Color3.fromRGB(255, 85, 85) -- Red
local ESP_ACCENT = Color3.fromRGB(85, 255, 85) -- Green
local FARM_ACCENT = Color3.fromRGB(85, 255, 255) -- Cyan
local FRUIT_ACCENT = Color3.fromRGB(170, 85, 255) -- Purple (New color for Fruit Menu)
local OTHER_ACCENT = Color3.fromRGB(255, 170, 0) -- Orange

local NPC_ESP_DISTANCE = 500
local TRACER_COLOR = OTHER_ACCENT
local TRACER_THICKNESS = 0.2
local TRACER_TRANSPARENCY = 0.2

-- Get the player's PlayerGui to store the UI
local player = Players.LocalPlayer
local PlayerGui = player:WaitForChild("PlayerGui")
local character = player.Character or player.CharacterAdded:Wait()
local myRootPart: Part = character:FindFirstChild("HumanoidRootPart") :: any

-- Create a container for the tracers to ensure they are always visible
local TracerContainer = Instance.new("Folder")
TracerContainer.Name = "TracerContainer"
TracerContainer.Parent = Workspace

-- Reusable function to create UI frames with the new style
local function createStyledFrame(size: UDim2, position: UDim2, parent: Instance, color: Color3, isMinimized: boolean?)
	local frame = Instance.new("Frame")
	frame.Name = "MainFrame"
	frame.Size = if isMinimized then MINIMIZED_SIZE else size
	frame.Position = position
	frame.BackgroundColor3 = FROSTED_BACKGROUND
	frame.BackgroundTransparency = 0.25
	frame.BorderSizePixel = 0
	frame.AnchorPoint = Vector2.new(0.5, 0.5)
	frame.ClipsDescendants = not isMinimized or false
	frame.Parent = parent

	local corner = Instance.new("UICorner")
	corner.CornerRadius = UDim.new(0, 12)
	corner.Parent = frame

	local stroke = Instance.new("UIStroke")
	stroke.Color = BORDER_COLOR
	stroke.Thickness = 1.5
	stroke.Transparency = 0.5
	stroke.Parent = frame

	local shadow = Instance.new("UIStroke")
	shadow.Name = "ShadowStroke"
	shadow.Color = SHADOW_COLOR
	shadow.Thickness = 2
	shadow.Transparency = 0.7
	shadow.Parent = frame

	local layout = Instance.new("UIListLayout")
	layout.Padding = UDim.new(0, 10)
	layout.HorizontalAlignment = Enum.HorizontalAlignment.Center
	layout.SortOrder = Enum.SortOrder.LayoutOrder
	layout.Parent = frame

	return frame, corner, stroke
end

-- Reusable function for the title bar with buttons
local function createTitleBar(parent: Instance, title: string, accentColor: Color3)
	local titleBar = Instance.new("Frame")
	titleBar.Name = "TitleBar"
	titleBar.Size = UDim2.new(1, 0, 0, 45)
	titleBar.BackgroundColor3 = FROSTED_BACKGROUND
	titleBar.BackgroundTransparency = 0.1
	titleBar.BorderSizePixel = 0
	titleBar.Parent = parent

	local corner = Instance.new("UICorner")
	corner.CornerRadius = UDim.new(0, 10)
	corner.Parent = titleBar

	local gradient = Instance.new("UIGradient")
	gradient.Color = ColorSequence.new(accentColor, accentColor:Lerp(Color3.new(0,0,0), 0.5))
	gradient.Rotation = 90
	gradient.Parent = titleBar

	local titleLabel = Instance.new("TextLabel")
	titleLabel.Name = "TitleLabel"
	titleLabel.Size = UDim2.new(1, -70, 1, 0)
	titleLabel.Position = UDim2.new(0, 15, 0, 0)
	titleLabel.BackgroundTransparency = 1
	titleLabel.TextColor3 = FONT_COLOR
	titleLabel.TextScaled = true
	titleLabel.Font = TITLE_FONT
	titleLabel.Text = title
	titleLabel.TextXAlignment = Enum.TextXAlignment.Left
	titleLabel.TextYAlignment = Enum.TextYAlignment.Center
	titleLabel.Parent = titleBar

	local minimizeButton = Instance.new("TextButton")
	minimizeButton.Name = "MinimizeButton"
	minimizeButton.Size = UDim2.new(0, 30, 1, -15)
	minimizeButton.Position = UDim2.new(1, -75, 0, 8)
	minimizeButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
	minimizeButton.BorderSizePixel = 0
	minimizeButton.Text = "-"
	minimizeButton.TextColor3 = FONT_COLOR
	minimizeButton.TextSize = 25
	minimizeButton.Font = TITLE_FONT
	minimizeButton.Parent = titleBar
	
	local minCorner = Instance.new("UICorner")
	minCorner.CornerRadius = UDim.new(0, 8)
	minCorner.Parent = minimizeButton

	local nukeButton = Instance.new("TextButton")
	nukeButton.Name = "NukeButton"
	nukeButton.Size = UDim2.new(0, 30, 1, -15)
	nukeButton.Position = UDim2.new(1, -40, 0, 8)
	nukeButton.BackgroundColor3 = BOSS_ACCENT:Lerp(Color3.new(0,0,0), 0.5)
	nukeButton.BorderSizePixel = 0
	nukeButton.Text = "X"
	nukeButton.TextColor3 = FONT_COLOR
	nukeButton.TextSize = 20
	nukeButton.Font = TITLE_FONT
	nukeButton.Parent = titleBar
	
	local nukeCorner = Instance.new("UICorner")
	nukeCorner.CornerRadius = UDim.new(0, 8)
	nukeCorner.Parent = nukeButton
	
	-- Hover effects
	minimizeButton.MouseEnter:Connect(function()  minimizeButton.BackgroundColor3 = accentColor end)
	minimizeButton.MouseLeave:Connect(function()  minimizeButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50) end)
	nukeButton.MouseEnter:Connect(function()  nukeButton.BackgroundColor3 = BOSS_ACCENT end)
	nukeButton.MouseLeave:Connect(function()  nukeButton.BackgroundColor3 = BOSS_ACCENT:Lerp(Color3.new(0,0,0), 0.5) end)

	return titleBar, minimizeButton, nukeButton
end

-- Reusable function for a toggle button
local function createToggleButton(parent: Instance, text: string, accentColor: Color3, initialActiveState: boolean, layoutOrder: number)
	local container = Instance.new("Frame")
	container.Name = "ToggleContainer"
	container.LayoutOrder = layoutOrder
	container.Size = UDim2.new(1, 0, 0, 40)
	container.BackgroundColor3 = FROSTED_BACKGROUND
	container.BackgroundTransparency = 0.5
	container.BorderSizePixel = 0
	container.Parent = parent

	local corner = Instance.new("UICorner")
	corner.CornerRadius = UDim.new(0, 8)
	corner.Parent = container

	local button = Instance.new("TextButton")
	button.Name = "ToggleButton"
	button.Size = UDim2.new(1, 0, 1, 0)
	button.BackgroundTransparency = 1
	button.Text = ""
	button.Parent = container

	local toggleBox = Instance.new("Frame")
	toggleBox.Name = "ToggleBox"
	toggleBox.Size = UDim2.new(0, 20, 0, 20)
	toggleBox.Position = UDim2.new(0, 10, 0.5, -10)
	toggleBox.BackgroundColor3 = if initialActiveState then accentColor else Color3.fromRGB(80, 80, 80)
	toggleBox.BorderSizePixel = 1
	toggleBox.BorderColor3 = BORDER_COLOR
	toggleBox.Parent = button

	local boxCorner = Instance.new("UICorner")
	boxCorner.CornerRadius = UDim.new(0, 5)
	boxCorner.Parent = toggleBox

	local checkmark = Instance.new("ImageLabel")
	checkmark.Name = "Checkmark"
	checkmark.BackgroundTransparency = 1
	checkmark.Size = UDim2.new(1, 0, 1, 0)
	checkmark.Image = "rbxassetid://603417770"
	checkmark.ImageColor3 = FONT_COLOR
	checkmark.Visible = initialActiveState
	checkmark.Parent = toggleBox

	local label = Instance.new("TextLabel")
	label.Name = "Label"
	label.Size = UDim2.new(1, -40, 1, 0)
	label.Position = UDim2.new(0, 35, 0, 0)
	label.BackgroundTransparency = 1
	label.TextColor3 = FONT_COLOR
	label.Text = text
	label.TextScaled = true
	label.Font = TITLE_FONT
	label.TextXAlignment = Enum.TextXAlignment.Left
	label.Parent = button

	return button, checkmark, toggleBox
end

-- DRAGGING FUNCTIONALITY
local isDragging = false
local dragStartPos = Vector2.new(0, 0)
local dragStartFramePosition = UDim2.new(0, 0, 0, 0)
local activeFrame = nil
local tweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)

local function setupDrag(frame: Frame, titleBar: Frame)
	titleBar.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			isDragging = true
			dragStartPos = input.Position
			dragStartFramePosition = frame.Position
			activeFrame = frame
			UserInputService.MouseIconEnabled = false
		end
	end)
end

UserInputService.InputEnded:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
		isDragging = false
		activeFrame = nil
		UserInputService.MouseIconEnabled = true
	end
end)

UserInputService.InputChanged:Connect(function(input)
	if isDragging and activeFrame and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
		local delta = input.Position - dragStartPos
		local newPosition = dragStartFramePosition + UDim2.new(0, delta.X, 0, delta.Y)
		activeFrame.Position = newPosition
	end
end)

-- =================================================================
-- === Menu 1: Boss Status =========================================
-- =================================================================

local screenGui1 = Instance.new("ScreenGui")
screenGui1.Name = "BossStatusMenu"
screenGui1.ResetOnSpawn = false
screenGui1.Parent = PlayerGui

local mainFrame1, corner1, stroke1 = createStyledFrame(UI_SIZE, UDim2.new(0.5, -150, 0.5, -100), screenGui1, FROSTED_BACKGROUND, false)
local titleBar1, minimizeButton1, nukeButton1 = createTitleBar(mainFrame1, "Boss Status", BOSS_ACCENT)
setupDrag(mainFrame1, titleBar1)

local isMinimized1 = false
minimizeButton1.MouseButton1Click:Connect(function()
	isMinimized1 = not isMinimized1
	local targetSize = if isMinimized1 then MINIMIZED_SIZE else UI_SIZE
	local targetClipsDescendants = not isMinimized1
	TweenService:Create(mainFrame1, tweenInfo, {Size = targetSize}):Play()
	task.delay(0.2, function() mainFrame1.ClipsDescendants = targetClipsDescendants end)
	minimizeButton1.Text = if isMinimized1 then "+" else "-"
end)

local statusLabel = Instance.new("TextLabel")
statusLabel.Name = "StatusLabel"
statusLabel.LayoutOrder = 1
statusLabel.Size = UDim2.new(1, -20, 0, 50)
statusLabel.BackgroundTransparency = 1
statusLabel.TextColor3 = FONT_COLOR
statusLabel.TextScaled = true
statusLabel.Font = TITLE_FONT
statusLabel.Text = "Checking for bosses..."
statusLabel.TextXAlignment = Enum.TextXAlignment.Center
statusLabel.Parent = mainFrame1
	
-- DYNAMIC STATUS CHECK
local enemiesFolder = Workspace:FindFirstChild("Enemies")
if not enemiesFolder then
	statusLabel.Text = "No enemies folder found!"
end

task.spawn(function()
	while task.wait(1) do
		if not screenGui1.Parent then break end
		if enemiesFolder then
			local sawBoss = enemiesFolder:FindFirstChild("Saw")
			if sawBoss and sawBoss:IsA("Model") then
				statusLabel.Text = "Bosses spawned!"
				statusLabel.TextColor3 = BOSS_ACCENT
			else
				statusLabel.Text = "No bosses spawned"
				statusLabel.TextColor3 = FONT_COLOR
			end
		end
	end
end)

-- =================================================================
-- === Menu 2: Player & NPC ESP ====================================
-- =================================================================

local screenGui2 = Instance.new("ScreenGui")
screenGui2.Name = "PlayerESPMenu"
screenGui2.ResetOnSpawn = false
screenGui2.Parent = PlayerGui

local mainFrame2, corner2, stroke2 = createStyledFrame(UDim2.new(0, 300, 0, 420), UDim2.new(0.5, -150, 0.5, 100), screenGui2, FROSTED_BACKGROUND, false)
local titleBar2, minimizeButton2, nukeButton2 = createTitleBar(mainFrame2, "Player & NPC ESP", ESP_ACCENT)
setupDrag(mainFrame2, titleBar2)

local isMinimized2 = false
minimizeButton2.MouseButton1Click:Connect(function()
	isMinimized2 = not isMinimized2
	local targetSize = if isMinimized2 then MINIMIZED_SIZE else UDim2.new(0, 300, 0, 420)
	local targetClipsDescendants = not isMinimized2
	TweenService:Create(mainFrame2, tweenInfo, {Size = targetSize}):Play()
	task.delay(0.2, function() mainFrame2.ClipsDescendants = targetClipsDescendants end)
	minimizeButton2.Text = if isMinimized2 then "+" else "-"
end)

-- Player ESP Section
local playerEspLabel = Instance.new("TextLabel")
playerEspLabel.Name = "PlayerEspLabel"
playerEspLabel.LayoutOrder = 1
playerEspLabel.Text = "Player ESP Options"
playerEspLabel.Size = UDim2.new(1, -20, 0, 25)
playerEspLabel.BackgroundTransparency = 1
playerEspLabel.TextColor3 = ESP_ACCENT
playerEspLabel.TextScaled = true
playerEspLabel.Font = TITLE_FONT
playerEspLabel.TextXAlignment = Enum.TextXAlignment.Left
playerEspLabel.Parent = mainFrame2

local playerEspTypes = {
	["Username ESP"] = false,
	["Distance ESP"] = false,
	["Player Tracing"] = false,
}
local playerCheckboxState = { ["Username ESP"] = false, ["Distance ESP"] = false, ["Player Tracing"] = false }
local playerEspLayoutOrder = 2
local function createPlayerEspCheckbox(espName)
	local button, checkmark, toggleBox = createToggleButton(mainFrame2, espName, OTHER_ACCENT, false, playerEspLayoutOrder)
	playerEspLayoutOrder += 1
	button.MouseButton1Click:Connect(function()
		local newState = not playerCheckboxState[espName]
		playerCheckboxState[espName] = newState
		checkmark.Visible = newState
		TweenService:Create(toggleBox, tweenInfo, {BackgroundColor3 = if newState then OTHER_ACCENT else Color3.fromRGB(80, 80, 80)}):Play()
	end)
end

for espName, _ in pairs(playerEspTypes) do
	createPlayerEspCheckbox(espName)
end

-- NPC ESP Section
local npcEspLabel = Instance.new("TextLabel")
npcEspLabel.Name = "NpcEspLabel"
npcEspLabel.LayoutOrder = playerEspLayoutOrder
npcEspLabel.Text = "NPC ESP Options"
npcEspLabel.Size = UDim2.new(1, -20, 0, 25)
npcEspLabel.BackgroundTransparency = 1
npcEspLabel.TextColor3 = ESP_ACCENT
npcEspLabel.TextScaled = true
npcEspLabel.Font = TITLE_FONT
npcEspLabel.TextXAlignment = Enum.TextXAlignment.Left
npcEspLabel.Parent = mainFrame2
playerEspLayoutOrder += 1

local npcTypes = {
	["Set Home Point"] = false,
	["Boat Dealer"] = false,
}
local npcCheckboxState = { ["Set Home Point"] = false, ["Boat Dealer"] = false }

local function createNpcEspCheckbox(npcName)
	local button, checkmark, toggleBox = createToggleButton(mainFrame2, npcName, ESP_ACCENT, false, playerEspLayoutOrder)
	playerEspLayoutOrder += 1
	button.MouseButton1Click:Connect(function()
		local newState = not npcCheckboxState[npcName]
		npcCheckboxState[npcName] = newState
		checkmark.Visible = newState
		TweenService:Create(toggleBox, tweenInfo, {BackgroundColor3 = if newState then ESP_ACCENT else Color3.fromRGB(80, 80, 80)}):Play()
	end)
end

for npcName, _ in pairs(npcTypes) do
	createNpcEspCheckbox(npcName)
end

-- ESP FUNCTIONALITY (UNCHANGED)
local playerLabels = {}
local npcLabels = {}
local playerTracers = {}
local npcsFolder = Workspace:WaitForChild("NPCs")

local function createPlayerLabel()
	local label = Instance.new("TextLabel")
	label.BackgroundTransparency = 1
	label.Size = UDim2.new(0, 100, 0, 20)
	label.TextColor3 = OTHER_ACCENT
	label.TextStrokeColor3 = Color3.new(0, 0, 0)
	label.TextStrokeTransparency = 0.5
	label.TextScaled = true
	label.Font = Enum.Font.SourceSansBold
	label.ZIndex = 10
	label.Parent = screenGui2
	return label
end
local function createPlayerLabelsForExistingPlayers()
	for _, p in ipairs(Players:GetPlayers()) do
		if p ~= player and not playerLabels[p] then
			playerLabels[p] = createPlayerLabel()
		end
	end
end

local function updatePlayerLabels()
	for p, label in pairs(playerLabels) do
		local character = p.Character
		if not character or not character:FindFirstChild("HumanoidRootPart") then
			label.Visible = false
			continue
		end
		local rootPart = character.HumanoidRootPart
		local screenPos, onScreen = Workspace.CurrentCamera:WorldToScreenPoint(rootPart.Position + Vector3.new(0, 5, 0))
		if onScreen then
			local labelText = ""
			local labelWidth = 100
			if playerCheckboxState["Username ESP"] and playerCheckboxState["Distance ESP"] then
				labelText = p.Name .. " (" .. tostring(math.floor((rootPart.Position - myRootPart.Position).Magnitude * 0.28 * 10) / 10) .. "m)"
				labelWidth = 250
			elseif playerCheckboxState["Username ESP"] then
				labelText = p.Name
				labelWidth = 125
			elseif playerCheckboxState["Distance ESP"] then
				local distanceInMeters = (rootPart.Position - myRootPart.Position).Magnitude * 0.28
				local formattedDistance = math.floor(distanceInMeters * 10) / 10
				labelText = formattedDistance .. "m"
				labelWidth = 125
			end
			label.Size = UDim2.new(0, labelWidth, 0, 20)
			label.Position = UDim2.new(0, screenPos.X - label.AbsoluteSize.X / 2, 0, screenPos.Y - label.AbsoluteSize.Y / 2)
			label.Text = labelText
			label.Visible = true
		else
			label.Visible = false
		end
	end
end
local function removeAllPlayerLabels()
	for _, label in pairs(playerLabels) do
		if label and label.Parent then label:Destroy() end
	end
	playerLabels = {}
end
local function createPlayerTracer()
	local tracer = Instance.new("Part")
	tracer.Name = "Tracer"
	tracer.Anchored = true
	tracer.CanCollide = false
	tracer.Material = Enum.Material.ForceField
	tracer.Transparency = TRACER_TRANSPARENCY
	tracer.Color = TRACER_COLOR
	tracer.Size = Vector3.new(1, 1, 1)
	tracer.Parent = TracerContainer
	local mesh = Instance.new("CylinderMesh")
	mesh.Parent = tracer
	return tracer
end
local function updatePlayerTracer(tracer, targetPart, myRootPart)
	if not myRootPart or not targetPart or not targetPart.Parent then
		if tracer then tracer:Destroy() end
		return
	end
	local startPos = myRootPart.Position
	local endPos = targetPart.Position
	local distance = (startPos - endPos).Magnitude
	local middle = startPos:Lerp(endPos, 0.5)
	local tracerCFrame = CFrame.new(middle, endPos)
	tracerCFrame = tracerCFrame * CFrame.Angles(math.pi / 2, 0, 0)
	tracer.CFrame = tracerCFrame
	local mesh = tracer:FindFirstChildOfClass("CylinderMesh")
	if mesh then mesh.Scale = Vector3.new(TRACER_THICKNESS, distance, TRACER_THICKNESS) end
	tracer.Transparency = TRACER_TRANSPARENCY
end
local function updatePlayerTracers()
	local playersWithTracers = {}
	for _, p in ipairs(Players:GetPlayers()) do
		if p ~= player then
			local targetCharacter = p.Character
			local targetPart = targetCharacter and targetCharacter:FindFirstChild("HumanoidRootPart")
			if targetPart and targetPart.Position and myRootPart.Position then
				local tracer = playerTracers[p]
				if not tracer then
					tracer = createPlayerTracer()
					playerTracers[p] = tracer
				end
				updatePlayerTracer(tracer, targetPart, myRootPart)
				playersWithTracers[p] = true
			end
		end
	end
	for p, tracer in pairs(playerTracers) do
		if not playersWithTracers[p] then
			tracer:Destroy()
			playerTracers[p] = nil
		end
	end
end
local function removeAllPlayerTracers()
	for p, tracer in pairs(playerTracers) do
		if tracer and tracer.Parent then tracer:Destroy() end
	end
	playerTracers = {}
end

-- NPC ESP FUNCTIONS
local function createNpcLabel(npcName)
	local label = Instance.new("TextLabel")
	label.BackgroundTransparency = 1
	label.Size = UDim2.new(0, 100, 0, 20)
	label.TextColor3 = ESP_ACCENT
	label.TextStrokeColor3 = Color3.new(0, 0, 0)
	label.TextStrokeTransparency = 0.5
	label.TextScaled = true
	label.Font = Enum.Font.SourceSansBold
	label.Text = npcName
	label.Name = npcName .. "ESPLabel"
	label.ZIndex = 10
	label.Parent = screenGui2
	return label
end
local function updateNpcLabels()
	local existingNpcs = {}
	for _, npc in ipairs(npcsFolder:GetChildren()) do
		if npc:IsA("Model") and npc.Name and npcCheckboxState[npc.Name] and npc:FindFirstChild("HumanoidRootPart") then
			local rootPart = npc.HumanoidRootPart
			local distance = (myRootPart.Position - rootPart.Position).Magnitude
			if distance <= NPC_ESP_DISTANCE then
				existingNpcs[npc] = true
				if not npcLabels[npc] then npcLabels[npc] = createNpcLabel(npc.Name) end
				local label = npcLabels[npc]
				local screenPos, onScreen = Workspace.CurrentCamera:WorldToScreenPoint(rootPart.Position + Vector3.new(0, 5, 0))
				if onScreen then
					label.Position = UDim2.new(0, screenPos.X - label.AbsoluteSize.X / 2, 0, screenPos.Y - label.AbsoluteSize.Y / 2)
					label.Visible = true
				else
					label.Visible = false
				end
			end
		end
	end
	for npc, label in pairs(npcLabels) do
		if not existingNpcs[npc] then label:Destroy() npcLabels[npc] = nil end
	end
end
local function removeAllNpcLabels()
	for _, label in pairs(npcLabels) do
		if label and label.Parent then label:Destroy() end
	end
	npcLabels = {}
end

-- =================================================================
-- === Menu 3: Farm Level ==========================================
-- =================================================================
local screenGui3 = Instance.new("ScreenGui")
screenGui3.Name = "FarmLevelMenu"
screenGui3.ResetOnSpawn = false
screenGui3.Parent = PlayerGui

local mainFrame3, corner3, stroke3 = createStyledFrame(UI_SIZE, UDim2.new(0.5, -150, 0.5, 300), screenGui3, FROSTED_BACKGROUND, false)
local titleBar3, minimizeButton3, nukeButton3 = createTitleBar(mainFrame3, "Farm Level", FARM_ACCENT)
setupDrag(mainFrame3, titleBar3)

local isMinimized3 = false
minimizeButton3.MouseButton1Click:Connect(function()
	isMinimized3 = not isMinimized3
	local targetSize = if isMinimized3 then MINIMIZED_SIZE else UI_SIZE
	local targetClipsDescendants = not isMinimized3
	TweenService:Create(mainFrame3, tweenInfo, {Size = targetSize}):Play()
	task.delay(0.2, function() mainFrame3.ClipsDescendants = targetClipsDescendants end)
	minimizeButton3.Text = if isMinimized3 then "+" else "-"
end)

-- UI for Level Status
local levelStatusFrame = Instance.new("Frame")
levelStatusFrame.Name = "LevelStatusFrame"
levelStatusFrame.LayoutOrder = 2
levelStatusFrame.Size = UDim2.new(1, -20, 0, 50)
levelStatusFrame.BackgroundColor3 = FROSTED_BACKGROUND
levelStatusFrame.BackgroundTransparency = 0.5
levelStatusFrame.BorderSizePixel = 0
levelStatusFrame.ClipsDescendants = true
levelStatusFrame.Visible = false
levelStatusFrame.Parent = mainFrame3

local levelStatusCorner = Instance.new("UICorner")
levelStatusCorner.CornerRadius = UDim.new(0, 8)
levelStatusCorner.Parent = levelStatusFrame

local levelStatusLabel = Instance.new("TextLabel")
levelStatusLabel.Name = "LevelStatusLabel"
levelStatusLabel.Size = UDim2.new(1, 0, 1, 0)
levelStatusLabel.BackgroundTransparency = 1
levelStatusLabel.TextColor3 = FONT_COLOR
levelStatusLabel.Text = "Level Status"
levelStatusLabel.TextScaled = true
levelStatusLabel.Font = TITLE_FONT
levelStatusLabel.Parent = levelStatusFrame

-- Toggle button for "farm level"
local farmLevelToggle, farmLevelCheckmark, farmLevelToggleBox = createToggleButton(mainFrame3, "Farm Level", FARM_ACCENT, false, 1)
local isFarmLevelActive = false
farmLevelToggle.MouseButton1Click:Connect(function()
	isFarmLevelActive = not isFarmLevelActive
	farmLevelCheckmark.Visible = isFarmLevelActive
	TweenService:Create(farmLevelToggleBox, tweenInfo, {BackgroundColor3 = if isFarmLevelActive then FARM_ACCENT else Color3.fromRGB(80, 80, 80)}):Play()
	levelStatusFrame.Visible = isFarmLevelActive
end)

-- LEVEL CHECKING FUNCTIONALITY
task.spawn(function()
	while task.wait(1) do
		if not screenGui3.Parent then break end
		if isFarmLevelActive then
			local dataFolder = player:FindFirstChild("Data")
			if dataFolder then
				local levelValue = dataFolder:FindFirstChild("Level")
				if levelValue and levelValue:IsA("IntValue") then
					local currentLevel = levelValue.Value
					if currentLevel >= 0 and currentLevel <= 10 then
						levelStatusLabel.Text = "Your current level is: " .. currentLevel
					else
						levelStatusLabel.Text = "Level is not between 0-10"
					end
					levelStatusLabel.TextColor3 = FONT_COLOR
				else
					levelStatusLabel.Text = "Level IntValue not found!"
					levelStatusLabel.TextColor3 = BOSS_ACCENT
				end
			else
				levelStatusLabel.Text = "Data folder not found!"
				levelStatusLabel.TextColor3 = BOSS_ACCENT
			end
		end
	end
end)

-- =================================================================
-- === Menu 4: Fruit Menu ==========================================
-- =================================================================

local screenGui4 = Instance.new("ScreenGui")
screenGui4.Name = "FruitMenu"
screenGui4.ResetOnSpawn = false
screenGui4.Parent = PlayerGui

local mainFrame4, corner4, stroke4 = createStyledFrame(UI_SIZE, UDim2.new(0.5, 150, 0.5, -100), screenGui4, FROSTED_BACKGROUND, false)
local titleBar4, minimizeButton4, nukeButton4 = createTitleBar(mainFrame4, "Fruit Menu", FRUIT_ACCENT)
setupDrag(mainFrame4, titleBar4)

local isMinimized4 = false
minimizeButton4.MouseButton1Click:Connect(function()
	isMinimized4 = not isMinimized4
	local targetSize = if isMinimized4 then MINIMIZED_SIZE else UI_SIZE
	local targetClipsDescendants = not isMinimized4
	TweenService:Create(mainFrame4, tweenInfo, {Size = targetSize}):Play()
	task.delay(0.2, function() mainFrame4.ClipsDescendants = targetClipsDescendants end)
	minimizeButton4.Text = if isMinimized4 then "+" else "-"
end)

-- Fruit ESP Toggle
local fruitEspToggle, fruitEspCheckmark, fruitEspToggleBox = createToggleButton(mainFrame4, "Fruit ESP", FRUIT_ACCENT, false, 1)
local isFruitEspActive = false
fruitEspToggle.MouseButton1Click:Connect(function()
	isFruitEspActive = not isFruitEspActive
	fruitEspCheckmark.Visible = isFruitEspActive
	TweenService:Create(fruitEspToggleBox, tweenInfo, {BackgroundColor3 = if isFruitEspActive then FRUIT_ACCENT else Color3.fromRGB(80, 80, 80)}):Play()
end)

local fruitStatusLabel = Instance.new("TextLabel")
fruitStatusLabel.Name = "FruitStatusLabel"
fruitStatusLabel.LayoutOrder = 2
fruitStatusLabel.Size = UDim2.new(1, -20, 0, 50)
fruitStatusLabel.BackgroundTransparency = 1
fruitStatusLabel.TextColor3 = FONT_COLOR
fruitStatusLabel.TextScaled = true
fruitStatusLabel.Font = TITLE_FONT
fruitStatusLabel.Text = "Checking for fruits..."
fruitStatusLabel.TextXAlignment = Enum.TextXAlignment.Center
fruitStatusLabel.Parent = mainFrame4

-- Fruit ESP logic (simplified for demonstration)
local fruitLabels = {}
local fruitFolder = Workspace:FindFirstChild("Fruits")

local function createFruitLabel(fruitPart)
	local label = Instance.new("TextLabel")
	label.BackgroundTransparency = 1
	label.Size = UDim2.new(0, 150, 0, 20)
	label.TextColor3 = FRUIT_ACCENT
	label.TextStrokeColor3 = Color3.new(0, 0, 0)
	label.TextStrokeTransparency = 0.5
	label.TextScaled = true
	label.Font = Enum.Font.SourceSansBold
	label.ZIndex = 10
	label.Parent = screenGui4
	label.Text = "Fruit Found: " .. fruitPart.Name
	return label
end

local function updateFruitESP()
	if not fruitFolder then
		fruitStatusLabel.Text = "Fruit folder not found!"
		return
	end

	local foundFruits = {}
	for _, part in ipairs(fruitFolder:GetChildren()) do
		if part:IsA("Part") then
			foundFruits[part] = true
			if not fruitLabels[part] then
				fruitLabels[part] = createFruitLabel(part)
			end

			local label = fruitLabels[part]
			local screenPos, onScreen = Workspace.CurrentCamera:WorldToScreenPoint(part.Position)
			if onScreen then
				label.Position = UDim2.new(0, screenPos.X - label.AbsoluteSize.X / 2, 0, screenPos.Y - label.AbsoluteSize.Y / 2)
				label.Visible = true
			else
				label.Visible = false
			end
		end
	end

	for part, label in pairs(fruitLabels) do
		if not foundFruits[part] then
			label:Destroy()
			fruitLabels[part] = nil
		end
	end
	
	if next(foundFruits) then
		fruitStatusLabel.Text = "Fruits have spawned!"
		fruitStatusLabel.TextColor3 = FRUIT_ACCENT
	else
		fruitStatusLabel.Text = "No fruits have spawned"
		fruitStatusLabel.TextColor3 = FONT_COLOR
	end
end

-- =================================================================
-- === Event Handling & Cleanup ====================================
-- =================================================================
Players.PlayerAdded:Connect(function(p)
	if p ~= player then playerLabels[p] = createPlayerLabel() playerTracers[p] = createPlayerTracer() end
end)
Players.PlayerRemoving:Connect(function(p)
	local label = playerLabels[p]
	if label then label:Destroy() playerLabels[p] = nil end
	local tracer = playerTracers[p]
	if tracer then tracer:Destroy() playerTracers[p] = nil end
end)

createPlayerLabelsForExistingPlayers()

RunService.RenderStepped:Connect(function()
	myRootPart = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
	if not myRootPart then return end
	local isPlayerLabelEspActive = playerCheckboxState["Username ESP"] or playerCheckboxState["Distance ESP"]
	local isTracingActive = playerCheckboxState["Player Tracing"]
	if isPlayerLabelEspActive then updatePlayerLabels() else for _, label in pairs(playerLabels) do label.Visible = false end end
	if isTracingActive then updatePlayerTracers() else for _, tracer in pairs(playerTracers) do tracer.Transparency = 1 end end
	if npcCheckboxState["Set Home Point"] or npcCheckboxState["Boat Dealer"] then updateNpcLabels() else for _, label in pairs(npcLabels) do label.Visible = false end end
	if isFruitEspActive then updateFruitESP() else for _, label in pairs(fruitLabels) do label.Visible = false end end
end)

local function checkAndDestroyScript()
	if not screenGui1.Parent and not screenGui2.Parent and not screenGui3.Parent and not screenGui4.Parent then
		if TracerContainer then TracerContainer:Destroy() end
		script:Destroy()
	end
end

nukeButton1.MouseButton1Click:Connect(function() screenGui1:Destroy() checkAndDestroyScript() end)
nukeButton2.MouseButton1Click:Connect(function()
	removeAllPlayerLabels()
	removeAllNpcLabels()
	removeAllPlayerTracers()
	for espName, _ in pairs(playerCheckboxState) do playerCheckboxState[espName] = false end
	for npcName, _ in pairs(npcCheckboxState) do npcCheckboxState[npcName] = false end
	screenGui2:Destroy()
	checkAndDestroyScript()
end)
nukeButton3.MouseButton1Click:Connect(function() screenGui3:Destroy() checkAndDestroyScript() end)
nukeButton4.MouseButton1Click:Connect(function() screenGui4:Destroy() checkAndDestroyScript() end)
